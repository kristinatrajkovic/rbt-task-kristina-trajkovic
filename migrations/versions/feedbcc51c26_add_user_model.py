"""Add User model

Revision ID: feedbcc51c26
Revises: 
Create Date: 2025-06-19 12:19:50.672561

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'feedbcc51c26'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=80), nullable=False),
    sa.Column('password', sa.String(length=120), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('username')
    )
    with op.batch_alter_table('amenity', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('amenities_name_key'), type_='unique')

    with op.batch_alter_table('building', schema=None) as batch_op:
        batch_op.alter_column('rooms',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.Integer(),
               existing_nullable=True)
        batch_op.alter_column('price',
               existing_type=sa.INTEGER(),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.drop_constraint(batch_op.f('fk_buildings_estate_type'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('fk_buildings_offer'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('fk_buildings_city_part'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'city_part', ['city_part_id'], ['id'])
        batch_op.create_foreign_key(None, 'estate_type', ['estate_type_id'], ['id'])
        batch_op.create_foreign_key(None, 'offer', ['offer_id'], ['id'])

    with op.batch_alter_table('building_floor', schema=None) as batch_op:
        batch_op.add_column(sa.Column('id', sa.Integer(), nullable=False))
        batch_op.alter_column('floor_level',
               existing_type=sa.VARCHAR(),
               type_=sa.Integer(),
               existing_nullable=True)
        batch_op.drop_constraint(batch_op.f('building_floors_building_id_fkey'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'building', ['building_id'], ['id'])

    with op.batch_alter_table('city', schema=None) as batch_op:
        batch_op.alter_column('state_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.drop_constraint(batch_op.f('cities_name_key'), type_='unique')

    with op.batch_alter_table('city_part', schema=None) as batch_op:
        batch_op.alter_column('city_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.drop_constraint(batch_op.f('city_parts_name_city_id_key'), type_='unique')

    with op.batch_alter_table('estate_type', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('estate_types_name_key'), type_='unique')

    with op.batch_alter_table('heating', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('heatings_name_key'), type_='unique')

    with op.batch_alter_table('offer', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('offers_name_key'), type_='unique')

    with op.batch_alter_table('state', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('states_name_key'), type_='unique')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('state', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('states_name_key'), ['name'], postgresql_nulls_not_distinct=False)

    with op.batch_alter_table('offer', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('offers_name_key'), ['name'], postgresql_nulls_not_distinct=False)

    with op.batch_alter_table('heating', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('heatings_name_key'), ['name'], postgresql_nulls_not_distinct=False)

    with op.batch_alter_table('estate_type', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('estate_types_name_key'), ['name'], postgresql_nulls_not_distinct=False)

    with op.batch_alter_table('city_part', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('city_parts_name_city_id_key'), ['name', 'city_id'], postgresql_nulls_not_distinct=False)
        batch_op.alter_column('city_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('city', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('cities_name_key'), ['name'], postgresql_nulls_not_distinct=False)
        batch_op.alter_column('state_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('building_floor', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('building_floors_building_id_fkey'), 'building', ['building_id'], ['id'], ondelete='CASCADE')
        batch_op.alter_column('floor_level',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
        batch_op.drop_column('id')

    with op.batch_alter_table('building', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('fk_buildings_city_part'), 'city_part', ['city_part_id'], ['id'], ondelete='RESTRICT')
        batch_op.create_foreign_key(batch_op.f('fk_buildings_offer'), 'offer', ['offer_id'], ['id'], ondelete='RESTRICT')
        batch_op.create_foreign_key(batch_op.f('fk_buildings_estate_type'), 'estate_type', ['estate_type_id'], ['id'], ondelete='RESTRICT')
        batch_op.alter_column('price',
               existing_type=sa.Float(),
               type_=sa.INTEGER(),
               existing_nullable=True)
        batch_op.alter_column('rooms',
               existing_type=sa.Integer(),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=True)

    with op.batch_alter_table('amenity', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('amenities_name_key'), ['name'], postgresql_nulls_not_distinct=False)

    op.drop_table('user')
    # ### end Alembic commands ###
